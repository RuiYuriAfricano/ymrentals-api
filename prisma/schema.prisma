generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Modelo de Usuário
model User {
  id                String        @id @default(uuid())
  email             String        @unique
  password          String
  fullName          String
  phoneNumber       String
  dateOfBirth       DateTime
  isEmailVerified   Boolean       @default(false)
  isPhoneVerified   Boolean       @default(false)
  userType          UserType      @default(DEFAULT)
  isBlocked         Boolean       @default(false)
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  deletedAt         DateTime?

  profilePicture    String?       // ← Novo campo adicionado aqui

  // Relações de Chat
  chatsInitiated    Chat[]        @relation("ChatInitiator")
  chatsReceived     Chat[]        @relation("ChatReceiver")
  messages          Message[]

  // Relação com BlockedUser
  blockedUsers      BlockedUser[] @relation("Blocker")
  blockedBy         BlockedUser[] @relation("Blocked")

  // Relação com BankInfo
  bankInfo          BankInfo?

  // Relação com Address
  address           Address?

  // Relação com Equipment (Owner)
  ownedEquipments   Equipment[]   @relation("OwnerEquipments")

  // Relação com Rental (Renter)
  renterRentals     Rental[]      @relation("RenterRentals")

  // Relação com Rental (Owner)
  ownerRentals      Rental[]      @relation("OwnerRentals")

  // Relação com Review
  reviews           Review[]

  // Relação com Report (Reported)
  receivedReports   Report[]      @relation("ReceivedReports")

  // Relação com Report (Reporter)
  filedReports      Report[]      @relation("FiledReports")
}

// Modelo de Chat (Conversas)
model Chat {
  id             String    @id @default(uuid())
  createdAt      DateTime  @default(now())
  isBlocked      Boolean   @default(false)

  // Relações
  initiatorId    String
  initiator      User      @relation("ChatInitiator", fields: [initiatorId], references: [id])
  receiverId     String
  receiver       User      @relation("ChatReceiver", fields: [receiverId], references: [id])
  messages       Message[]
}

// Modelo de Mensagem
model Message {
  id          String    @id @default(uuid())
  content     String
  createdAt   DateTime  @default(now())

  // Relações
  chatId      String
  chat        Chat      @relation(fields: [chatId], references: [id])
  senderId    String
  sender      User      @relation(fields: [senderId], references: [id])
}

// Modelo de Usuários Bloqueados
model BlockedUser {
  id          String   @id @default(uuid())
  blockerId   String
  blockedId   String
  createdAt   DateTime @default(now())

  // Relações
  blocker     User     @relation("Blocker", fields: [blockerId], references: [id])
  blocked     User     @relation("Blocked", fields: [blockedId], references: [id])
}

// Modelo de Informações Bancárias
model BankInfo {
  id              String    @id @default(uuid())
  accountNumber   String
  bankName        String
  userId          String    @unique
  user            User      @relation(fields: [userId], references: [id])
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  deletedAt       DateTime?
}

// Modelo de Endereço
model Address {
  id              String    @id @default(uuid())
  street          String
  number          String
  district        String
  city            String
  province        String
  latitude        Float?
  longitude       Float?
  userId          String    @unique
  user            User      @relation(fields: [userId], references: [id])
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  deletedAt       DateTime?

    // Relação inversa com Equipment
  equipments      Equipment[]
}

// Modelo de Equipamento
model Equipment {
  id              String    @id @default(uuid())
  name            String
  description     String
  category        String
  pricePeriod     PricePeriod?
  price           Float?
  salePrice       Float?
  images          String[]
  videos          String[]
  specifications  Json?
  isAvailable     Boolean   @default(true)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  deletedAt       DateTime?

  // Relações
  ownerId         String
  owner           User      @relation("OwnerEquipments", fields: [ownerId], references: [id])
  rentals         Rental[]
  reviews         Review[]
  addressId       String?
  address         Address?  @relation(fields: [addressId], references: [id])
}


// Modelo de Aluguel
model Rental {
  id              String        @id @default(uuid())
  startDate       DateTime
  endDate         DateTime
  status          RentalStatus  @default(PENDING)
  totalAmount     Float
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  deletedAt       DateTime?

  // Relações
  equipmentId     String
  equipment       Equipment     @relation(fields: [equipmentId], references: [id])
  renterId        String
  renter          User          @relation("RenterRentals", fields: [renterId], references: [id])
  ownerId         String
  owner           User          @relation("OwnerRentals", fields: [ownerId], references: [id])
}

// Modelo de Avaliação
model Review {
  id              String    @id @default(uuid())
  rating          Int
  comment         String?
  createdAt       DateTime  @default(now())
  deletedAt       DateTime?

  // Relações
  userId          String
  user            User      @relation(fields: [userId], references: [id])
  equipmentId     String
  equipment       Equipment @relation(fields: [equipmentId], references: [id])
}

// Modelo de Reporte de Usuário
model Report {
  id              String    @id @default(uuid())
  reason          String
  details         String?
  evidence        String[]
  status          ReportStatus @default(PENDING)
  createdAt       DateTime  @default(now())

  // Relações
  reportedUserId  String
  reportedUser    User      @relation("ReceivedReports", fields: [reportedUserId], references: [id])
  reporterUserId  String
  reporterUser    User      @relation("FiledReports", fields: [reporterUserId], references: [id])
}

// ENUMS
enum UserType {
  DEFAULT
  MODERATOR
  ADMIN
}

enum RentalStatus {
  PENDING
  APPROVED
  REJECTED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum ReportStatus {
  PENDING
  REVIEWED
  REJECTED
}
enum PricePeriod {
  HOURLY
  DAILY
  WEEKLY
  MONTHLY
}