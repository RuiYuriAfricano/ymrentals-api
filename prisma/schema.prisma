generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                                      String          @id @default(uuid())
  email                                   String          @unique
  password                                String?
  fullName                                String
  phoneNumber                             String?
  dateOfBirth                             DateTime?
  isEmailVerified                         Boolean         @default(false)
  isPhoneVerified                         Boolean         @default(false)
  userType                                UserType        @default(TENANT)
  isBlocked                               Boolean         @default(false)
  createdAt                               DateTime        @default(now())
  updatedAt                               DateTime        @updatedAt
  deletedAt                               DateTime?
  isCompany                               Boolean         @default(false)
  nif                                     String?
  companyDocuments                        String[]
  profilePicture                          String?
  addressId                               String?
  accountStatus                           AccountStatus   @default(PENDING)
  approvedAt                              DateTime?
  approvedBy                              String?
  companyAddress                          String?
  companyDocument                         String?
  companyName                             String?
  companyType                             CompanyType?
  companyCoverImage                       String?
  createdBy                               String?
  rejectedAt                              DateTime?
  rejectedBy                              String?
  rejectionReason                         String?
  role                                    UserRole        @default(USER)
  occupation                              String?
  location                                String?
  bio                                     String?
  biDocument                              String?
  biValidated                             Boolean         @default(false)
  biValidatedBy                           String?
  biValidatedAt                           DateTime?
  biRejectionReason                       String?
  emailVerificationToken                  String?
  emailVerificationExpires                DateTime?
  // Google OAuth fields
  googleId                                String?         @unique
  googleEmail                             String?
  isGoogleUser                            Boolean         @default(false)
  googleProfilePicture                    String?
  googleVerified                          Boolean         @default(false)
  BlockedUser_BlockedUser_blockedIdToUser BlockedUser[]   @relation("BlockedUser_blockedIdToUser")
  BlockedUser_BlockedUser_blockerIdToUser BlockedUser[]   @relation("BlockedUser_blockerIdToUser")
  Chat_Chat_initiatorIdToUser             Chat[]          @relation("Chat_initiatorIdToUser")
  Chat_Chat_receiverIdToUser              Chat[]          @relation("Chat_receiverIdToUser")
  ownedEquipments                         Equipment[]     @relation("OwnerEquipments")
  moderatedEquipments                     Equipment[]     @relation("ModeratedEquipments")
  Favorite                                Favorite[]
  Cart                                    Cart[]
  Message                                 Message[]
  ownerRentals                            Rental[]        @relation("OwnerRentals")
  renterRentals                           Rental[]        @relation("RenterRentals")
  moderatedRentals                        Rental[]        @relation("ModeratedRentals")
  Report_Report_reportedUserIdToUser      Report[]        @relation("Report_reportedUserIdToUser")
  Report_Report_reporterUserIdToUser      Report[]        @relation("Report_reporterUserIdToUser")
  reviews                                 Review[]
  Upload                                  Upload[]
  Address                                 Address?        @relation(fields: [addressId], references: [id])
  notifications                           notifications[]
  moderatedEquipmentEdits                 EquipmentEdit[] @relation("EquipmentEditModerator")
  wallet                                  Wallet?
  sponsoredAds                            AdSponsorship[] @relation("SponsorAds")
  targetedAds                             AdSponsorship[] @relation("TargetedAds")
}

model Address {
  id        String      @id @default(uuid())
  street    String?
  number    String?
  district  String?
  city      String?
  province  String?
  latitude  Float?
  longitude Float?
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  deletedAt DateTime?
  Equipment Equipment[]
  User      User[]
}

model Equipment {
  id               String          @id @default(uuid())
  name             String
  description      String?
  category         String          // Manter para compatibilidade
  categoryId       String?         // Nova relação com Category
  brand            String?         // Marca do equipamento (ex: Caterpillar, Komatsu)
  model            String?         // Modelo específico do equipamento
  pricePeriod      PricePeriod?
  price            Float?
  salePrice        Float?
  images           String[]
  videos           String[]
  documents        String[]
  specifications   Json?
  isAvailable      Boolean         @default(true)
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  deletedAt        DateTime?
  ownerId          String
  addressId        String?
  moderatedAt      DateTime?
  moderatedBy      String?
  moderationStatus EquipmentStatus @default(PENDING)
  rejectionReason  String?
  Address          Address?        @relation(fields: [addressId], references: [id])
  owner            User            @relation("OwnerEquipments", fields: [ownerId], references: [id])
  moderatedByUser  User?           @relation("ModeratedEquipments", fields: [moderatedBy], references: [id])
  Category         Category?       @relation(fields: [categoryId], references: [id])
  Favorite         Favorite[]
  Cart             Cart[]
  rentals          Rental[]
  reviews          Review[]
  edits            EquipmentEdit[]
  sponsorships     AdSponsorship[]
}

model Rental {
  id                    String       @id @default(uuid())
  startDate             DateTime
  endDate               DateTime
  startTime             String?      // Hora de início (formato HH:mm)
  endTime               String?      // Hora de fim (formato HH:mm)
  status                RentalStatus @default(PENDING)
  totalAmount           Float
  dailyRate             Float?       // Taxa diária
  pricePeriod           PricePeriod? // Período de precário
  maxRentalDays         Int?         // Limite máximo de dias de aluguel
  paymentMethod         PaymentMethod @default(RECEIPT)
  paymentStatus         PaymentStatus @default(PENDING)
  paymentReference      String?      // Referência de pagamento
  paymentReceipt        String?      // URL do comprovativo de pagamento
  paymentReceiptStatus  PaymentReceiptStatus @default(PENDING)
  moderatedBy           String?      // ID do moderador que validou o pagamento
  moderatedAt           DateTime?    // Data de moderação do pagamento
  returnNotificationSent Boolean     @default(false)
  returnReminderDate    DateTime?    // Data para enviar lembrete de devolução
  // Localização do locatário no momento da solicitação
  renterLatitude        Float?       // Latitude do locatário
  renterLongitude       Float?       // Longitude do locatário
  renterAddress         String?      // Endereço formatado do locatário
  // Sistema de prioridade
  hasPriority           Boolean      @default(false) // Se pagou taxa de prioridade
  priorityAmount        Float?       // Valor pago pela prioridade
  priorityPaidAt        DateTime?    // Data do pagamento da prioridade
  approvedAt            DateTime?    // Data de aprovação do pedido
  createdAt             DateTime     @default(now())
  updatedAt             DateTime     @updatedAt
  deletedAt             DateTime?
  equipmentId           String
  renterId              String
  ownerId               String
  equipment             Equipment    @relation(fields: [equipmentId], references: [id])
  owner                 User         @relation("OwnerRentals", fields: [ownerId], references: [id])
  renter                User         @relation("RenterRentals", fields: [renterId], references: [id])
  moderator             User?        @relation("ModeratedRentals", fields: [moderatedBy], references: [id])
}

model Review {
  id          String    @id @default(uuid())
  rating      Int
  comment     String?
  createdAt   DateTime  @default(now())
  deletedAt   DateTime?
  userId      String
  equipmentId String
  equipment   Equipment @relation(fields: [equipmentId], references: [id])
  user        User      @relation(fields: [userId], references: [id])
}

model BlockedUser {
  id                               String   @id
  blockerId                        String
  blockedId                        String
  createdAt                        DateTime @default(now())
  User_BlockedUser_blockedIdToUser User     @relation("BlockedUser_blockedIdToUser", fields: [blockedId], references: [id])
  User_BlockedUser_blockerIdToUser User     @relation("BlockedUser_blockerIdToUser", fields: [blockerId], references: [id])
}

model Chat {
  id                          String    @id
  createdAt                   DateTime  @default(now())
  isBlocked                   Boolean   @default(false)
  initiatorId                 String
  receiverId                  String
  User_Chat_initiatorIdToUser User      @relation("Chat_initiatorIdToUser", fields: [initiatorId], references: [id])
  User_Chat_receiverIdToUser  User      @relation("Chat_receiverIdToUser", fields: [receiverId], references: [id])
  Message                     Message[]
}

model Favorite {
  id          String    @id
  createdAt   DateTime  @default(now())
  userId      String
  equipmentId String
  Equipment   Equipment @relation(fields: [equipmentId], references: [id])
  User        User      @relation(fields: [userId], references: [id])

  @@unique([userId, equipmentId])
}

model Cart {
  id          String    @id @default(uuid())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  userId      String
  equipmentId String
  quantity    Int       @default(1)
  startDate   DateTime?
  endDate     DateTime?
  period      String?   // 'HOURLY', 'DAILY', 'WEEKLY', 'MONTHLY'
  Equipment   Equipment @relation(fields: [equipmentId], references: [id])
  User        User      @relation(fields: [userId], references: [id])

  @@unique([userId, equipmentId])
}

model Message {
  id        String   @id
  content   String
  createdAt DateTime @default(now())
  chatId    String
  senderId  String
  isRead    Boolean  @default(false)
  Chat      Chat     @relation(fields: [chatId], references: [id])
  User      User     @relation(fields: [senderId], references: [id])
}

model Report {
  id                               String       @id
  reason                           String
  details                          String?
  evidence                         String[]
  status                           ReportStatus @default(PENDING)
  createdAt                        DateTime     @default(now())
  reportedUserId                   String
  reporterUserId                   String
  User_Report_reportedUserIdToUser User         @relation("Report_reportedUserIdToUser", fields: [reportedUserId], references: [id])
  User_Report_reporterUserIdToUser User         @relation("Report_reporterUserIdToUser", fields: [reporterUserId], references: [id])
}

model Upload {
  id           String   @id
  filename     String   @unique
  originalName String
  mimetype     String
  size         Int
  path         String
  type         String
  url          String
  createdAt    DateTime @default(now())
  updatedAt    DateTime
  userId       String
  User         User     @relation(fields: [userId], references: [id])
}

model notifications {
  id        String           @id
  userId    String
  title     String
  message   String
  type      NotificationType @default(INFO)
  data      String?
  isRead    Boolean          @default(false)
  createdAt DateTime         @default(now())
  updatedAt DateTime
  deletedAt DateTime?
  User      User             @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UserType {
  LANDLORD
  TENANT
}

enum RentalStatus {
  PENDING
  APPROVED
  REJECTED
  PAID
  ACTIVE
  COMPLETED
  CANCELLED
}

enum AccountStatus {
  PENDING
  APPROVED
  REJECTED
  SUSPENDED
}

enum CompanyType {
  INDIVIDUAL
  COMPANY
  NGO
  LDA
  SA
  UNIPESSOAL
  COOPERATIVA
  OUTRO
}

enum EquipmentStatus {
  PENDING
  APPROVED
  REJECTED
}

enum NotificationType {
  INFO
  SUCCESS
  WARNING
  ERROR
}

model Category {
  id          String      @id @default(uuid())
  name        String      @unique
  description String?
  icon        String?
  image       String?
  isActive    Boolean     @default(true)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  Equipment   Equipment[]

  @@map("categories")
}

model Content {
  id        String   @id @default(uuid())
  key       String   @unique
  title     String
  content   String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("contents")
}

model EquipmentEdit {
  id               String                @id @default(uuid())
  equipmentId      String
  name             String?
  description      String?
  category         String?
  categoryId       String?
  pricePeriod      PricePeriod?
  price            Float?
  salePrice        Float?
  images           String[]
  videos           String[]
  documents        String[]
  specifications   Json?
  isAvailable      Boolean?
  addressId        String?
  status           EquipmentEditStatus   @default(PENDING)
  moderatedAt      DateTime?
  moderatedBy      String?
  rejectionReason  String?
  createdAt        DateTime              @default(now())
  updatedAt        DateTime              @updatedAt
  equipment        Equipment             @relation(fields: [equipmentId], references: [id])
  moderator        User?                 @relation("EquipmentEditModerator", fields: [moderatedBy], references: [id])

  @@map("equipment_edits")
}

enum PricePeriod {
  HOURLY
  DAILY
  WEEKLY
  MONTHLY
}

enum ReportStatus {
  PENDING
  REVIEWED
  REJECTED
}

enum UserRole {
  USER
  MODERATOR
  MODERATOR_MANAGER
  ADMIN
}

enum EquipmentEditStatus {
  PENDING
  APPROVED
  REJECTED
}

enum PaymentMethod {
  REFERENCE
  RECEIPT
  WALLET
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

enum PaymentReceiptStatus {
  PENDING
  APPROVED
  REJECTED
}

model SystemConfig {
  id                      String   @id @default(uuid())
  siteName                String   @default("YM Rentals")
  siteDescription         String   @default("Plataforma de aluguel de equipamentos em Angola")
  contactEmail            String   @default("contato@ymrentals.com")
  supportEmail            String   @default("suporte@ymrentals.com")
  maxFileSize             Int      @default(10)
  allowedFileTypes        String[] @default(["jpg", "jpeg", "png", "pdf"])
  emailNotifications      Boolean  @default(true)
  smsNotifications        Boolean  @default(false)
  maintenanceMode         Boolean  @default(false)
  registrationEnabled     Boolean  @default(true)
  autoApproveEquipment    Boolean  @default(false)
  autoApproveLandlords    Boolean  @default(false)
  maxEquipmentPerUser     Int      @default(50)
  sessionTimeout          Int      @default(24)
  passwordMinLength       Int      @default(6)
  requireEmailVerification Boolean @default(true)
  requirePhoneVerification Boolean @default(false)
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt
  createdBy               String?
  updatedBy               String?

  @@map("system_config")
}

// Carteira Digital
model Wallet {
  id            String             @id @default(uuid())
  userId        String             @unique
  balance       Float              @default(0) // Saldo em Kwanza
  isActive      Boolean            @default(true)
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  user          User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions  WalletTransaction[]

  @@map("wallets")
}

model WalletTransaction {
  id                String                    @id @default(uuid())
  walletId          String
  type              WalletTransactionType
  amount            Float                     // Valor em Kwanza (positivo para crédito, negativo para débito)
  description       String
  status            WalletTransactionStatus   @default(PENDING)
  reference         String?                   // Referência externa (ProxyPay, etc.)
  proxyPayReference String?                   // Referência específica do ProxyPay
  proxyPayId        String?                   // ID da transação no ProxyPay
  metadata          Json?                     // Dados adicionais (JSON)
  createdAt         DateTime                  @default(now())
  updatedAt         DateTime                  @updatedAt
  wallet            Wallet                    @relation(fields: [walletId], references: [id], onDelete: Cascade)

  @@map("wallet_transactions")
}

enum WalletTransactionType {
  DEPOSIT           // Depósito
  WITHDRAWAL        // Saque
  PAYMENT           // Pagamento de aluguel
  REFUND            // Reembolso
  PRIORITY_FEE      // Taxa de prioridade
  PROMOTION_FEE     // Taxa de promoção
  COMMISSION        // Comissão da plataforma
  BONUS             // Bônus/recompensa
}

enum WalletTransactionStatus {
  PENDING           // Pendente
  PROCESSING        // Processando
  COMPLETED         // Concluída
  FAILED            // Falhou
  CANCELLED         // Cancelada
  REFUNDED          // Reembolsada
}

// Patrocínio de Anúncios
model AdSponsorship {
  id              String                @id @default(uuid())
  sponsorId       String                // ID do locador que patrocina
  targetUserId    String?               // ID do usuário alvo (opcional, se null = todos)
  equipmentId     String?               // ID do equipamento específico (opcional)
  amount          Float                 // Valor pago pelo patrocínio
  duration        Int                   // Duração em dias
  startDate       DateTime              // Data de início
  endDate         DateTime              // Data de fim
  status          AdSponsorshipStatus   @default(ACTIVE)
  impressions     Int                   @default(0) // Número de visualizações
  clicks          Int                   @default(0) // Número de cliques
  createdAt       DateTime              @default(now())
  updatedAt       DateTime              @updatedAt
  sponsor         User                  @relation("SponsorAds", fields: [sponsorId], references: [id])
  targetUser      User?                 @relation("TargetedAds", fields: [targetUserId], references: [id])
  equipment       Equipment?            @relation(fields: [equipmentId], references: [id])

  @@map("ad_sponsorships")
}

enum AdSponsorshipStatus {
  ACTIVE
  PAUSED
  EXPIRED
  CANCELLED
}
